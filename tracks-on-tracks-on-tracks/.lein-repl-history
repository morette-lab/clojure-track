(list 1 2)
(require 'tracks-on-tracks-on-tracks)
(new-list)
(list)
(conj "asd" (list))
(conj (list "asd") (list))
(conj (list "asd") (list 1))
(conj (list "asd") (list 1 2))
(conj (list "asd") 1 2)
(conj (list "asd") (list 1 2))
(conj "asd" (list 1 2))
(conj (list "asd") (list 1 2))
(conj (list "Clojrue" "Lisp") "Java")
(conj (list) "Clojure")
(conj (conj (list) "Clojure") "Lisp")
(clojure.test/run-tests tracks-on-tracks-on-tracks
)
require 'tracks-on-tracks-on-tracks)
(require 'tracks-on-tracks-on-tracks)
(count (list 1 2))
(require 'tracks-on-tracks-on-tracks)
(learning-list)
(require 'tracks-on-tracks-on-tracks)
(new-list)
